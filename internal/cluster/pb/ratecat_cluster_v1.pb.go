// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internal/cluster/pb/ratecat_cluster_v1.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto1 "github.com/anserdsg/ratecat/v1/proto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EntryAction int32

const (
	EntryAction_PutResource           EntryAction = 0
	EntryAction_RemoveResource        EntryAction = 1
	EntryAction_UpdateResourceNodeId  EntryAction = 2
	EntryAction_UpdateResourceLimiter EntryAction = 3
)

var EntryAction_name = map[int32]string{
	0: "PutResource",
	1: "RemoveResource",
	2: "UpdateResourceNodeId",
	3: "UpdateResourceLimiter",
}

var EntryAction_value = map[string]int32{
	"PutResource":           0,
	"RemoveResource":        1,
	"UpdateResourceNodeId":  2,
	"UpdateResourceLimiter": 3,
}

func (x EntryAction) String() string {
	return proto.EnumName(EntryAction_name, int32(x))
}

func (EntryAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d26eef68fd2b0cae, []int{0}
}

type Entry struct {
	Id        []byte           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Action    EntryAction      `protobuf:"varint,2,opt,name=action,proto3,enum=cluster.EntryAction" json:"action,omitempty"`
	SrcNodeId uint32           `protobuf:"varint,3,opt,name=src_node_id,json=srcNodeId,proto3" json:"src_node_id,omitempty"`
	Resource  *proto1.Resource `protobuf:"bytes,4,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_d26eef68fd2b0cae, []int{0}
}
func (m *Entry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return m.Size()
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Entry) GetAction() EntryAction {
	if m != nil {
		return m.Action
	}
	return EntryAction_PutResource
}

func (m *Entry) GetSrcNodeId() uint32 {
	if m != nil {
		return m.SrcNodeId
	}
	return 0
}

func (m *Entry) GetResource() *proto1.Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

type EntrySnapshot struct {
	Entries []*Entry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (m *EntrySnapshot) Reset()         { *m = EntrySnapshot{} }
func (m *EntrySnapshot) String() string { return proto.CompactTextString(m) }
func (*EntrySnapshot) ProtoMessage()    {}
func (*EntrySnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_d26eef68fd2b0cae, []int{1}
}
func (m *EntrySnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntrySnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntrySnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntrySnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntrySnapshot.Merge(m, src)
}
func (m *EntrySnapshot) XXX_Size() int {
	return m.Size()
}
func (m *EntrySnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_EntrySnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_EntrySnapshot proto.InternalMessageInfo

func (m *EntrySnapshot) GetEntries() []*Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type AvgRpsReq struct {
	LastSecs uint32 `protobuf:"varint,1,opt,name=last_secs,json=lastSecs,proto3" json:"last_secs,omitempty"`
}

func (m *AvgRpsReq) Reset()         { *m = AvgRpsReq{} }
func (m *AvgRpsReq) String() string { return proto.CompactTextString(m) }
func (*AvgRpsReq) ProtoMessage()    {}
func (*AvgRpsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d26eef68fd2b0cae, []int{2}
}
func (m *AvgRpsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AvgRpsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AvgRpsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AvgRpsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AvgRpsReq.Merge(m, src)
}
func (m *AvgRpsReq) XXX_Size() int {
	return m.Size()
}
func (m *AvgRpsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AvgRpsReq.DiscardUnknown(m)
}

var xxx_messageInfo_AvgRpsReq proto.InternalMessageInfo

func (m *AvgRpsReq) GetLastSecs() uint32 {
	if m != nil {
		return m.LastSecs
	}
	return 0
}

type IsEntryAppliedReq struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *IsEntryAppliedReq) Reset()         { *m = IsEntryAppliedReq{} }
func (m *IsEntryAppliedReq) String() string { return proto.CompactTextString(m) }
func (*IsEntryAppliedReq) ProtoMessage()    {}
func (*IsEntryAppliedReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d26eef68fd2b0cae, []int{3}
}
func (m *IsEntryAppliedReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsEntryAppliedReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsEntryAppliedReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsEntryAppliedReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsEntryAppliedReq.Merge(m, src)
}
func (m *IsEntryAppliedReq) XXX_Size() int {
	return m.Size()
}
func (m *IsEntryAppliedReq) XXX_DiscardUnknown() {
	xxx_messageInfo_IsEntryAppliedReq.DiscardUnknown(m)
}

var xxx_messageInfo_IsEntryAppliedReq proto.InternalMessageInfo

func (m *IsEntryAppliedReq) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func init() {
	proto.RegisterEnum("cluster.EntryAction", EntryAction_name, EntryAction_value)
	proto.RegisterType((*Entry)(nil), "cluster.Entry")
	proto.RegisterType((*EntrySnapshot)(nil), "cluster.EntrySnapshot")
	proto.RegisterType((*AvgRpsReq)(nil), "cluster.AvgRpsReq")
	proto.RegisterType((*IsEntryAppliedReq)(nil), "cluster.IsEntryAppliedReq")
}

func init() {
	proto.RegisterFile("internal/cluster/pb/ratecat_cluster_v1.proto", fileDescriptor_d26eef68fd2b0cae)
}

var fileDescriptor_d26eef68fd2b0cae = []byte{
	// 555 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0xcb, 0x6e, 0xd4, 0x30,
	0x14, 0x4d, 0xa6, 0xf4, 0xe5, 0x30, 0xe9, 0xd4, 0x2a, 0x28, 0xa4, 0x28, 0x1a, 0x85, 0x4d, 0x80,
	0x2a, 0x51, 0x07, 0x09, 0xc1, 0x72, 0x5a, 0xaa, 0xaa, 0xa8, 0x42, 0x95, 0x2b, 0x58, 0xb0, 0x19,
	0x79, 0x92, 0xdb, 0xd4, 0x52, 0x12, 0x1b, 0xdb, 0x99, 0xaa, 0x7f, 0xd1, 0xff, 0xe1, 0x07, 0x58,
	0x76, 0xc9, 0x12, 0xb5, 0x3f, 0x82, 0xf2, 0x14, 0xd3, 0xb2, 0x4a, 0x7c, 0xce, 0xf1, 0xbd, 0xf7,
	0x9c, 0x2b, 0xa3, 0x3d, 0x56, 0x68, 0x90, 0x05, 0xcd, 0xa2, 0x38, 0x2b, 0x95, 0x06, 0x19, 0x89,
	0x79, 0x24, 0xa9, 0x86, 0x98, 0xea, 0x59, 0x0b, 0xcd, 0x16, 0xfb, 0xa1, 0x90, 0x5c, 0x73, 0xbc,
	0xde, 0x22, 0xae, 0x97, 0x72, 0x9e, 0x66, 0x10, 0xd5, 0xf0, 0xbc, 0xbc, 0x88, 0xae, 0x24, 0x15,
	0x02, 0xa4, 0x6a, 0x84, 0xee, 0xee, 0x43, 0x1e, 0x72, 0xa1, 0xaf, 0x5b, 0xd2, 0xad, 0x3f, 0x7d,
	0x17, 0x2a, 0x58, 0xdf, 0xc1, 0xbf, 0x31, 0xd1, 0xea, 0x51, 0xa1, 0xe5, 0x35, 0xb6, 0xd1, 0x80,
	0x25, 0x8e, 0x39, 0x36, 0x83, 0xa7, 0x64, 0xc0, 0x12, 0xbc, 0x87, 0xd6, 0x68, 0xac, 0x19, 0x2f,
	0x9c, 0xc1, 0xd8, 0x0c, 0xec, 0xc9, 0x4e, 0xd8, 0x0e, 0x13, 0xd6, 0xfa, 0x69, 0xcd, 0x91, 0x56,
	0x83, 0x3d, 0x64, 0x29, 0x19, 0xcf, 0x0a, 0x9e, 0xc0, 0x8c, 0x25, 0xce, 0xca, 0xd8, 0x0c, 0x86,
	0x64, 0x53, 0xc9, 0xf8, 0x0b, 0x4f, 0xe0, 0x24, 0xc1, 0xaf, 0xd1, 0x86, 0x04, 0xc5, 0x4b, 0x19,
	0x83, 0xf3, 0x64, 0x6c, 0x06, 0xd6, 0x64, 0x18, 0x52, 0xc1, 0x42, 0xd2, 0x82, 0xa4, 0xa7, 0xfd,
	0x8f, 0x68, 0x58, 0x77, 0x38, 0x2f, 0xa8, 0x50, 0x97, 0x5c, 0xe3, 0x00, 0xad, 0x43, 0xa1, 0x25,
	0x03, 0xe5, 0x98, 0xe3, 0x95, 0xc0, 0x9a, 0xd8, 0xcb, 0xa3, 0x90, 0x8e, 0xf6, 0x03, 0xb4, 0x39,
	0x5d, 0xa4, 0x44, 0x28, 0x02, 0x3f, 0xf0, 0x2e, 0xda, 0xcc, 0xa8, 0xd2, 0x33, 0x05, 0xb1, 0xaa,
	0x7d, 0x0d, 0xc9, 0x46, 0x05, 0x9c, 0x43, 0xac, 0xfc, 0x57, 0x68, 0xfb, 0x44, 0x35, 0x46, 0x84,
	0xc8, 0x18, 0x24, 0xd5, 0x8d, 0x07, 0x11, 0xbc, 0x49, 0x91, 0xf5, 0x8f, 0x57, 0xbc, 0x85, 0xac,
	0xb3, 0x52, 0x77, 0x13, 0x8f, 0x0c, 0x8c, 0x91, 0x4d, 0x20, 0xe7, 0x0b, 0xe8, 0x31, 0x13, 0x3b,
	0x68, 0xe7, 0xab, 0x48, 0xa8, 0xee, 0xb1, 0x26, 0x80, 0xd1, 0x00, 0xbf, 0x40, 0xcf, 0x96, 0x99,
	0x53, 0x96, 0x33, 0x0d, 0x72, 0xb4, 0x32, 0xf9, 0x39, 0x40, 0xeb, 0x87, 0x8d, 0x25, 0xfc, 0x1e,
	0x59, 0xc7, 0xa0, 0xeb, 0x5b, 0xc5, 0x05, 0xc7, 0xcf, 0xc3, 0x66, 0xb5, 0x61, 0xb7, 0xda, 0xf0,
	0xa8, 0x5a, 0xad, 0xdb, 0xc4, 0xd7, 0xc9, 0x7c, 0x03, 0x7f, 0x46, 0xf6, 0xb2, 0x23, 0xec, 0xf6,
	0x31, 0x3d, 0xb2, 0xea, 0xba, 0x8f, 0xca, 0x1e, 0x70, 0x9e, 0x7d, 0xa3, 0x59, 0x09, 0xbe, 0x81,
	0x8f, 0xd0, 0xd6, 0x31, 0xe8, 0xe9, 0xd9, 0xc9, 0x61, 0x9e, 0x54, 0x81, 0x9e, 0x9d, 0x63, 0xdc,
	0x17, 0xeb, 0x13, 0x76, 0x5f, 0x3e, 0x2a, 0xf2, 0x89, 0x97, 0xf3, 0x0c, 0xba, 0x32, 0x1f, 0xd0,
	0x88, 0x40, 0xca, 0xaa, 0x5b, 0x9d, 0x67, 0x6c, 0xb7, 0x6b, 0x4f, 0x09, 0xa8, 0xc3, 0x3c, 0x71,
	0xf1, 0xf2, 0x99, 0x80, 0x12, 0xbe, 0x81, 0xdf, 0xa2, 0xd5, 0x69, 0x96, 0xf1, 0x2b, 0xdc, 0xd8,
	0xac, 0xff, 0x2b, 0xf5, 0xf6, 0xd2, 0xb1, 0x11, 0x1f, 0x9c, 0xfe, 0xba, 0xf3, 0xcc, 0xdb, 0x3b,
	0xcf, 0xfc, 0x73, 0xe7, 0x99, 0x37, 0xf7, 0x9e, 0x71, 0x7b, 0xef, 0x19, 0xbf, 0xef, 0x3d, 0xe3,
	0xfb, 0x24, 0x65, 0xfa, 0xb2, 0x9c, 0x87, 0x31, 0xcf, 0x23, 0x5a, 0x28, 0x90, 0x89, 0x4a, 0xbb,
	0x77, 0x10, 0x2d, 0xf6, 0xa3, 0xff, 0x3c, 0xc6, 0xf9, 0x5a, 0x6d, 0xe6, 0xdd, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xa1, 0x1a, 0xec, 0xbe, 0xaa, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClusterClient is the client API for Cluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterClient interface {
	GetNodeInfo(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*proto1.NodeInfo, error)
	IsEntryApplied(ctx context.Context, in *IsEntryAppliedReq, opts ...grpc.CallOption) (*types.BoolValue, error)
	GetAPICmdAvgRPS(ctx context.Context, in *AvgRpsReq, opts ...grpc.CallOption) (*types.DoubleValue, error)
	RegisterResource(ctx context.Context, in *proto1.RegResCmd, opts ...grpc.CallOption) (*proto1.RegResCmdResp, error)
	Allow(ctx context.Context, in *proto1.AllowCmd, opts ...grpc.CallOption) (*proto1.AllowCmdResp, error)
}

type clusterClient struct {
	cc *grpc.ClientConn
}

func NewClusterClient(cc *grpc.ClientConn) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) GetNodeInfo(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*proto1.NodeInfo, error) {
	out := new(proto1.NodeInfo)
	err := c.cc.Invoke(ctx, "/cluster.Cluster/GetNodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) IsEntryApplied(ctx context.Context, in *IsEntryAppliedReq, opts ...grpc.CallOption) (*types.BoolValue, error) {
	out := new(types.BoolValue)
	err := c.cc.Invoke(ctx, "/cluster.Cluster/IsEntryApplied", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetAPICmdAvgRPS(ctx context.Context, in *AvgRpsReq, opts ...grpc.CallOption) (*types.DoubleValue, error) {
	out := new(types.DoubleValue)
	err := c.cc.Invoke(ctx, "/cluster.Cluster/GetAPICmdAvgRPS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) RegisterResource(ctx context.Context, in *proto1.RegResCmd, opts ...grpc.CallOption) (*proto1.RegResCmdResp, error) {
	out := new(proto1.RegResCmdResp)
	err := c.cc.Invoke(ctx, "/cluster.Cluster/RegisterResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) Allow(ctx context.Context, in *proto1.AllowCmd, opts ...grpc.CallOption) (*proto1.AllowCmdResp, error) {
	out := new(proto1.AllowCmdResp)
	err := c.cc.Invoke(ctx, "/cluster.Cluster/Allow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterServer is the server API for Cluster service.
type ClusterServer interface {
	GetNodeInfo(context.Context, *types.Empty) (*proto1.NodeInfo, error)
	IsEntryApplied(context.Context, *IsEntryAppliedReq) (*types.BoolValue, error)
	GetAPICmdAvgRPS(context.Context, *AvgRpsReq) (*types.DoubleValue, error)
	RegisterResource(context.Context, *proto1.RegResCmd) (*proto1.RegResCmdResp, error)
	Allow(context.Context, *proto1.AllowCmd) (*proto1.AllowCmdResp, error)
}

// UnimplementedClusterServer can be embedded to have forward compatible implementations.
type UnimplementedClusterServer struct {
}

func (*UnimplementedClusterServer) GetNodeInfo(ctx context.Context, req *types.Empty) (*proto1.NodeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeInfo not implemented")
}
func (*UnimplementedClusterServer) IsEntryApplied(ctx context.Context, req *IsEntryAppliedReq) (*types.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsEntryApplied not implemented")
}
func (*UnimplementedClusterServer) GetAPICmdAvgRPS(ctx context.Context, req *AvgRpsReq) (*types.DoubleValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPICmdAvgRPS not implemented")
}
func (*UnimplementedClusterServer) RegisterResource(ctx context.Context, req *proto1.RegResCmd) (*proto1.RegResCmdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterResource not implemented")
}
func (*UnimplementedClusterServer) Allow(ctx context.Context, req *proto1.AllowCmd) (*proto1.AllowCmdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Allow not implemented")
}

func RegisterClusterServer(s *grpc.Server, srv ClusterServer) {
	s.RegisterService(&_Cluster_serviceDesc, srv)
}

func _Cluster_GetNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.Cluster/GetNodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetNodeInfo(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_IsEntryApplied_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsEntryAppliedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).IsEntryApplied(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.Cluster/IsEntryApplied",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).IsEntryApplied(ctx, req.(*IsEntryAppliedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetAPICmdAvgRPS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvgRpsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetAPICmdAvgRPS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.Cluster/GetAPICmdAvgRPS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetAPICmdAvgRPS(ctx, req.(*AvgRpsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_RegisterResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.RegResCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).RegisterResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.Cluster/RegisterResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).RegisterResource(ctx, req.(*proto1.RegResCmd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_Allow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.AllowCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Allow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.Cluster/Allow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Allow(ctx, req.(*proto1.AllowCmd))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cluster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeInfo",
			Handler:    _Cluster_GetNodeInfo_Handler,
		},
		{
			MethodName: "IsEntryApplied",
			Handler:    _Cluster_IsEntryApplied_Handler,
		},
		{
			MethodName: "GetAPICmdAvgRPS",
			Handler:    _Cluster_GetAPICmdAvgRPS_Handler,
		},
		{
			MethodName: "RegisterResource",
			Handler:    _Cluster_RegisterResource_Handler,
		},
		{
			MethodName: "Allow",
			Handler:    _Cluster_Allow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/cluster/pb/ratecat_cluster_v1.proto",
}

func (m *Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Resource != nil {
		{
			size, err := m.Resource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRatecatClusterV1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.SrcNodeId != 0 {
		i = encodeVarintRatecatClusterV1(dAtA, i, uint64(m.SrcNodeId))
		i--
		dAtA[i] = 0x18
	}
	if m.Action != 0 {
		i = encodeVarintRatecatClusterV1(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRatecatClusterV1(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EntrySnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntrySnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EntrySnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRatecatClusterV1(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AvgRpsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AvgRpsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AvgRpsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastSecs != 0 {
		i = encodeVarintRatecatClusterV1(dAtA, i, uint64(m.LastSecs))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsEntryAppliedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsEntryAppliedReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsEntryAppliedReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRatecatClusterV1(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRatecatClusterV1(dAtA []byte, offset int, v uint64) int {
	offset -= sovRatecatClusterV1(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Entry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRatecatClusterV1(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovRatecatClusterV1(uint64(m.Action))
	}
	if m.SrcNodeId != 0 {
		n += 1 + sovRatecatClusterV1(uint64(m.SrcNodeId))
	}
	if m.Resource != nil {
		l = m.Resource.Size()
		n += 1 + l + sovRatecatClusterV1(uint64(l))
	}
	return n
}

func (m *EntrySnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovRatecatClusterV1(uint64(l))
		}
	}
	return n
}

func (m *AvgRpsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastSecs != 0 {
		n += 1 + sovRatecatClusterV1(uint64(m.LastSecs))
	}
	return n
}

func (m *IsEntryAppliedReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRatecatClusterV1(uint64(l))
	}
	return n
}

func sovRatecatClusterV1(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRatecatClusterV1(x uint64) (n int) {
	return sovRatecatClusterV1(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatecatClusterV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatClusterV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRatecatClusterV1
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRatecatClusterV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatClusterV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= EntryAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcNodeId", wireType)
			}
			m.SrcNodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatClusterV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcNodeId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatClusterV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatecatClusterV1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatecatClusterV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resource == nil {
				m.Resource = &proto1.Resource{}
			}
			if err := m.Resource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRatecatClusterV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRatecatClusterV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntrySnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatecatClusterV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntrySnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntrySnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatClusterV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatecatClusterV1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatecatClusterV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &Entry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRatecatClusterV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRatecatClusterV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AvgRpsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatecatClusterV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AvgRpsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AvgRpsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSecs", wireType)
			}
			m.LastSecs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatClusterV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSecs |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRatecatClusterV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRatecatClusterV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsEntryAppliedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatecatClusterV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsEntryAppliedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsEntryAppliedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatClusterV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRatecatClusterV1
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRatecatClusterV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRatecatClusterV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRatecatClusterV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRatecatClusterV1(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRatecatClusterV1
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRatecatClusterV1
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRatecatClusterV1
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRatecatClusterV1
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRatecatClusterV1
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRatecatClusterV1
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRatecatClusterV1        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRatecatClusterV1          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRatecatClusterV1 = fmt.Errorf("proto: unexpected end of group")
)
