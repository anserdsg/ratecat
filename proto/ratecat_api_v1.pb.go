// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/ratecat_api_v1.proto

package proto

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ErrorCode int32

const (
	// generic errors
	ErrorCode_OK            ErrorCode = 0
	ErrorCode_Unknown       ErrorCode = 1
	ErrorCode_NotFound      ErrorCode = 2
	ErrorCode_AlreadyExists ErrorCode = 3
	ErrorCode_OutOfRange    ErrorCode = 4
	// message errors
	ErrorCode_IncompletePacket ErrorCode = 32
	ErrorCode_InvalidMsg       ErrorCode = 33
	ErrorCode_InvalidMagicNum  ErrorCode = 34
	ErrorCode_InvalidLimiter   ErrorCode = 35
	ErrorCode_EncodeFail       ErrorCode = 36
	ErrorCode_DecodeFail       ErrorCode = 38
	// command/gRPC errors
	ErrorCode_ProcessFail ErrorCode = 64
	ErrorCode_ForwardFail ErrorCode = 65
)

var ErrorCode_name = map[int32]string{
	0:  "OK",
	1:  "Unknown",
	2:  "NotFound",
	3:  "AlreadyExists",
	4:  "OutOfRange",
	32: "IncompletePacket",
	33: "InvalidMsg",
	34: "InvalidMagicNum",
	35: "InvalidLimiter",
	36: "EncodeFail",
	38: "DecodeFail",
	64: "ProcessFail",
	65: "ForwardFail",
}

var ErrorCode_value = map[string]int32{
	"OK":               0,
	"Unknown":          1,
	"NotFound":         2,
	"AlreadyExists":    3,
	"OutOfRange":       4,
	"IncompletePacket": 32,
	"InvalidMsg":       33,
	"InvalidMagicNum":  34,
	"InvalidLimiter":   35,
	"EncodeFail":       36,
	"DecodeFail":       38,
	"ProcessFail":      64,
	"ForwardFail":      65,
}

func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}

func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e46b12dd09362083, []int{0}
}

type LimiterType int32

const (
	LimiterType_Null        LimiterType = 0
	LimiterType_TokenBucket LimiterType = 1
	LimiterType_LeakyBucket LimiterType = 2
)

var LimiterType_name = map[int32]string{
	0: "Null",
	1: "TokenBucket",
	2: "LeakyBucket",
}

var LimiterType_value = map[string]int32{
	"Null":        0,
	"TokenBucket": 1,
	"LeakyBucket": 2,
}

func (x LimiterType) String() string {
	return proto.EnumName(LimiterType_name, int32(x))
}

func (LimiterType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e46b12dd09362083, []int{1}
}

type CmdError struct {
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=api.ErrorCode" json:"code,omitempty"`
	Msg  string    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *CmdError) Reset()         { *m = CmdError{} }
func (m *CmdError) String() string { return proto.CompactTextString(m) }
func (*CmdError) ProtoMessage()    {}
func (*CmdError) Descriptor() ([]byte, []int) {
	return fileDescriptor_e46b12dd09362083, []int{0}
}
func (m *CmdError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CmdError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CmdError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CmdError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmdError.Merge(m, src)
}
func (m *CmdError) XXX_Size() int {
	return m.Size()
}
func (m *CmdError) XXX_DiscardUnknown() {
	xxx_messageInfo_CmdError.DiscardUnknown(m)
}

var xxx_messageInfo_CmdError proto.InternalMessageInfo

func (m *CmdError) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_OK
}

func (m *CmdError) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type CmdHeader struct {
	Cmd string `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
}

func (m *CmdHeader) Reset()         { *m = CmdHeader{} }
func (m *CmdHeader) String() string { return proto.CompactTextString(m) }
func (*CmdHeader) ProtoMessage()    {}
func (*CmdHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_e46b12dd09362083, []int{1}
}
func (m *CmdHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CmdHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CmdHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CmdHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmdHeader.Merge(m, src)
}
func (m *CmdHeader) XXX_Size() int {
	return m.Size()
}
func (m *CmdHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_CmdHeader.DiscardUnknown(m)
}

var xxx_messageInfo_CmdHeader proto.InternalMessageInfo

func (m *CmdHeader) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

type NodeInfo struct {
	Id           uint32           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ApiEndpoint  string           `protobuf:"bytes,3,opt,name=api_endpoint,json=apiEndpoint,proto3" json:"api_endpoint,omitempty"`
	GrpcEndpoint string           `protobuf:"bytes,4,opt,name=grpc_endpoint,json=grpcEndpoint,proto3" json:"grpc_endpoint,omitempty"`
	Type         string           `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Leader       bool             `protobuf:"varint,6,opt,name=leader,proto3" json:"leader,omitempty"`
	Active       bool             `protobuf:"varint,7,opt,name=active,proto3" json:"active,omitempty"`
	ActiveSince  *types.Timestamp `protobuf:"bytes,8,opt,name=active_since,json=activeSince,proto3" json:"active_since,omitempty"`
}

func (m *NodeInfo) Reset()         { *m = NodeInfo{} }
func (m *NodeInfo) String() string { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()    {}
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e46b12dd09362083, []int{2}
}
func (m *NodeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfo.Merge(m, src)
}
func (m *NodeInfo) XXX_Size() int {
	return m.Size()
}
func (m *NodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfo proto.InternalMessageInfo

func (m *NodeInfo) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NodeInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeInfo) GetApiEndpoint() string {
	if m != nil {
		return m.ApiEndpoint
	}
	return ""
}

func (m *NodeInfo) GetGrpcEndpoint() string {
	if m != nil {
		return m.GrpcEndpoint
	}
	return ""
}

func (m *NodeInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *NodeInfo) GetLeader() bool {
	if m != nil {
		return m.Leader
	}
	return false
}

func (m *NodeInfo) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *NodeInfo) GetActiveSince() *types.Timestamp {
	if m != nil {
		return m.ActiveSince
	}
	return nil
}

type MeowCmdResp struct {
	NodeId uint32      `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Nodes  []*NodeInfo `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (m *MeowCmdResp) Reset()         { *m = MeowCmdResp{} }
func (m *MeowCmdResp) String() string { return proto.CompactTextString(m) }
func (*MeowCmdResp) ProtoMessage()    {}
func (*MeowCmdResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e46b12dd09362083, []int{3}
}
func (m *MeowCmdResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeowCmdResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeowCmdResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeowCmdResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeowCmdResp.Merge(m, src)
}
func (m *MeowCmdResp) XXX_Size() int {
	return m.Size()
}
func (m *MeowCmdResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MeowCmdResp.DiscardUnknown(m)
}

var xxx_messageInfo_MeowCmdResp proto.InternalMessageInfo

func (m *MeowCmdResp) GetNodeId() uint32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *MeowCmdResp) GetNodes() []*NodeInfo {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type AllowCmd struct {
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	Events   uint32 `protobuf:"varint,2,opt,name=events,proto3" json:"events,omitempty"`
}

func (m *AllowCmd) Reset()         { *m = AllowCmd{} }
func (m *AllowCmd) String() string { return proto.CompactTextString(m) }
func (*AllowCmd) ProtoMessage()    {}
func (*AllowCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_e46b12dd09362083, []int{4}
}
func (m *AllowCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllowCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllowCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllowCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllowCmd.Merge(m, src)
}
func (m *AllowCmd) XXX_Size() int {
	return m.Size()
}
func (m *AllowCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_AllowCmd.DiscardUnknown(m)
}

var xxx_messageInfo_AllowCmd proto.InternalMessageInfo

func (m *AllowCmd) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *AllowCmd) GetEvents() uint32 {
	if m != nil {
		return m.Events
	}
	return 0
}

type AllowCmdResp struct {
	Redirected bool `protobuf:"varint,1,opt,name=redirected,proto3" json:"redirected,omitempty"`
	// it points to the redirected node if redirected field is true, otherwise it points to the current node
	NodeId uint32 `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Ok     bool   `protobuf:"varint,3,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (m *AllowCmdResp) Reset()         { *m = AllowCmdResp{} }
func (m *AllowCmdResp) String() string { return proto.CompactTextString(m) }
func (*AllowCmdResp) ProtoMessage()    {}
func (*AllowCmdResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e46b12dd09362083, []int{5}
}
func (m *AllowCmdResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllowCmdResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllowCmdResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllowCmdResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllowCmdResp.Merge(m, src)
}
func (m *AllowCmdResp) XXX_Size() int {
	return m.Size()
}
func (m *AllowCmdResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AllowCmdResp.DiscardUnknown(m)
}

var xxx_messageInfo_AllowCmdResp proto.InternalMessageInfo

func (m *AllowCmdResp) GetRedirected() bool {
	if m != nil {
		return m.Redirected
	}
	return false
}

func (m *AllowCmdResp) GetNodeId() uint32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *AllowCmdResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type RegResCmd struct {
	Resource string      `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	Type     LimiterType `protobuf:"varint,2,opt,name=type,proto3,enum=api.LimiterType" json:"type,omitempty"`
	Override bool        `protobuf:"varint,3,opt,name=override,proto3" json:"override,omitempty"`
	// Types that are valid to be assigned to Option:
	//
	//	*RegResCmd_TokenBucket
	Option isRegResCmd_Option `protobuf_oneof:"option"`
}

func (m *RegResCmd) Reset()         { *m = RegResCmd{} }
func (m *RegResCmd) String() string { return proto.CompactTextString(m) }
func (*RegResCmd) ProtoMessage()    {}
func (*RegResCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_e46b12dd09362083, []int{6}
}
func (m *RegResCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegResCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegResCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegResCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegResCmd.Merge(m, src)
}
func (m *RegResCmd) XXX_Size() int {
	return m.Size()
}
func (m *RegResCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_RegResCmd.DiscardUnknown(m)
}

var xxx_messageInfo_RegResCmd proto.InternalMessageInfo

type isRegResCmd_Option interface {
	isRegResCmd_Option()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RegResCmd_TokenBucket struct {
	TokenBucket *TokenBucketParam `protobuf:"bytes,4,opt,name=token_bucket,json=tokenBucket,proto3,oneof" json:"token_bucket,omitempty"`
}

func (*RegResCmd_TokenBucket) isRegResCmd_Option() {}

func (m *RegResCmd) GetOption() isRegResCmd_Option {
	if m != nil {
		return m.Option
	}
	return nil
}

func (m *RegResCmd) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *RegResCmd) GetType() LimiterType {
	if m != nil {
		return m.Type
	}
	return LimiterType_Null
}

func (m *RegResCmd) GetOverride() bool {
	if m != nil {
		return m.Override
	}
	return false
}

func (m *RegResCmd) GetTokenBucket() *TokenBucketParam {
	if x, ok := m.GetOption().(*RegResCmd_TokenBucket); ok {
		return x.TokenBucket
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RegResCmd) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RegResCmd_TokenBucket)(nil),
	}
}

type RegResCmdResp struct {
	NodeId uint32 `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (m *RegResCmdResp) Reset()         { *m = RegResCmdResp{} }
func (m *RegResCmdResp) String() string { return proto.CompactTextString(m) }
func (*RegResCmdResp) ProtoMessage()    {}
func (*RegResCmdResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e46b12dd09362083, []int{7}
}
func (m *RegResCmdResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegResCmdResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegResCmdResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegResCmdResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegResCmdResp.Merge(m, src)
}
func (m *RegResCmdResp) XXX_Size() int {
	return m.Size()
}
func (m *RegResCmdResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RegResCmdResp.DiscardUnknown(m)
}

var xxx_messageInfo_RegResCmdResp proto.InternalMessageInfo

func (m *RegResCmdResp) GetNodeId() uint32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

type GetResCmd struct {
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (m *GetResCmd) Reset()         { *m = GetResCmd{} }
func (m *GetResCmd) String() string { return proto.CompactTextString(m) }
func (*GetResCmd) ProtoMessage()    {}
func (*GetResCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_e46b12dd09362083, []int{8}
}
func (m *GetResCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetResCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetResCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetResCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResCmd.Merge(m, src)
}
func (m *GetResCmd) XXX_Size() int {
	return m.Size()
}
func (m *GetResCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResCmd.DiscardUnknown(m)
}

var xxx_messageInfo_GetResCmd proto.InternalMessageInfo

func (m *GetResCmd) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

type Resource struct {
	Name        string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NodeId      uint32           `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	LimiterType LimiterType      `protobuf:"varint,3,opt,name=limiter_type,json=limiterType,proto3,enum=api.LimiterType" json:"limiter_type,omitempty"`
	Rps         *ReqPerSec       `protobuf:"bytes,4,opt,name=rps,proto3" json:"rps,omitempty"`
	LastUpdated *types.Timestamp `protobuf:"bytes,5,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	// Types that are valid to be assigned to Limiter:
	//
	//	*Resource_TokenBucket
	Limiter isResource_Limiter `protobuf_oneof:"limiter"`
}

func (m *Resource) Reset()         { *m = Resource{} }
func (m *Resource) String() string { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()    {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_e46b12dd09362083, []int{9}
}
func (m *Resource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(m, src)
}
func (m *Resource) XXX_Size() int {
	return m.Size()
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

type isResource_Limiter interface {
	isResource_Limiter()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Resource_TokenBucket struct {
	TokenBucket *TokenBucketLimiter `protobuf:"bytes,6,opt,name=token_bucket,json=tokenBucket,proto3,oneof" json:"token_bucket,omitempty"`
}

func (*Resource_TokenBucket) isResource_Limiter() {}

func (m *Resource) GetLimiter() isResource_Limiter {
	if m != nil {
		return m.Limiter
	}
	return nil
}

func (m *Resource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Resource) GetNodeId() uint32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *Resource) GetLimiterType() LimiterType {
	if m != nil {
		return m.LimiterType
	}
	return LimiterType_Null
}

func (m *Resource) GetRps() *ReqPerSec {
	if m != nil {
		return m.Rps
	}
	return nil
}

func (m *Resource) GetLastUpdated() *types.Timestamp {
	if m != nil {
		return m.LastUpdated
	}
	return nil
}

func (m *Resource) GetTokenBucket() *TokenBucketLimiter {
	if x, ok := m.GetLimiter().(*Resource_TokenBucket); ok {
		return x.TokenBucket
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Resource) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Resource_TokenBucket)(nil),
	}
}

type ReqPerSec struct {
	ReqCount  uint32            `protobuf:"varint,1,opt,name=req_count,json=reqCount,proto3" json:"req_count,omitempty"`
	Histories []*ReqPerSecEntry `protobuf:"bytes,2,rep,name=histories,proto3" json:"histories,omitempty"`
}

func (m *ReqPerSec) Reset()         { *m = ReqPerSec{} }
func (m *ReqPerSec) String() string { return proto.CompactTextString(m) }
func (*ReqPerSec) ProtoMessage()    {}
func (*ReqPerSec) Descriptor() ([]byte, []int) {
	return fileDescriptor_e46b12dd09362083, []int{10}
}
func (m *ReqPerSec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqPerSec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqPerSec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqPerSec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqPerSec.Merge(m, src)
}
func (m *ReqPerSec) XXX_Size() int {
	return m.Size()
}
func (m *ReqPerSec) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqPerSec.DiscardUnknown(m)
}

var xxx_messageInfo_ReqPerSec proto.InternalMessageInfo

func (m *ReqPerSec) GetReqCount() uint32 {
	if m != nil {
		return m.ReqCount
	}
	return 0
}

func (m *ReqPerSec) GetHistories() []*ReqPerSecEntry {
	if m != nil {
		return m.Histories
	}
	return nil
}

type ReqPerSecEntry struct {
	Rps  float64          `protobuf:"fixed64,1,opt,name=rps,proto3" json:"rps,omitempty"`
	Time *types.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *ReqPerSecEntry) Reset()         { *m = ReqPerSecEntry{} }
func (m *ReqPerSecEntry) String() string { return proto.CompactTextString(m) }
func (*ReqPerSecEntry) ProtoMessage()    {}
func (*ReqPerSecEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_e46b12dd09362083, []int{11}
}
func (m *ReqPerSecEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqPerSecEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqPerSecEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqPerSecEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqPerSecEntry.Merge(m, src)
}
func (m *ReqPerSecEntry) XXX_Size() int {
	return m.Size()
}
func (m *ReqPerSecEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqPerSecEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ReqPerSecEntry proto.InternalMessageInfo

func (m *ReqPerSecEntry) GetRps() float64 {
	if m != nil {
		return m.Rps
	}
	return 0
}

func (m *ReqPerSecEntry) GetTime() *types.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

type TokenBucketParam struct {
	Rate  float64 `protobuf:"fixed64,1,opt,name=rate,proto3" json:"rate,omitempty"`
	Burst uint32  `protobuf:"varint,2,opt,name=burst,proto3" json:"burst,omitempty"`
}

func (m *TokenBucketParam) Reset()         { *m = TokenBucketParam{} }
func (m *TokenBucketParam) String() string { return proto.CompactTextString(m) }
func (*TokenBucketParam) ProtoMessage()    {}
func (*TokenBucketParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_e46b12dd09362083, []int{12}
}
func (m *TokenBucketParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenBucketParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenBucketParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenBucketParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenBucketParam.Merge(m, src)
}
func (m *TokenBucketParam) XXX_Size() int {
	return m.Size()
}
func (m *TokenBucketParam) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenBucketParam.DiscardUnknown(m)
}

var xxx_messageInfo_TokenBucketParam proto.InternalMessageInfo

func (m *TokenBucketParam) GetRate() float64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *TokenBucketParam) GetBurst() uint32 {
	if m != nil {
		return m.Burst
	}
	return 0
}

type TokenBucketLimiter struct {
	Rate       float64          `protobuf:"fixed64,1,opt,name=rate,proto3" json:"rate,omitempty"`
	Burst      uint32           `protobuf:"varint,2,opt,name=burst,proto3" json:"burst,omitempty"`
	TokenCount float64          `protobuf:"fixed64,3,opt,name=token_count,json=tokenCount,proto3" json:"token_count,omitempty"`
	FillPeriod int64            `protobuf:"varint,4,opt,name=fill_period,json=fillPeriod,proto3" json:"fill_period,omitempty"`
	LastFilled *types.Timestamp `protobuf:"bytes,5,opt,name=last_filled,json=lastFilled,proto3" json:"last_filled,omitempty"`
	NextFill   *types.Timestamp `protobuf:"bytes,6,opt,name=next_fill,json=nextFill,proto3" json:"next_fill,omitempty"`
}

func (m *TokenBucketLimiter) Reset()         { *m = TokenBucketLimiter{} }
func (m *TokenBucketLimiter) String() string { return proto.CompactTextString(m) }
func (*TokenBucketLimiter) ProtoMessage()    {}
func (*TokenBucketLimiter) Descriptor() ([]byte, []int) {
	return fileDescriptor_e46b12dd09362083, []int{13}
}
func (m *TokenBucketLimiter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenBucketLimiter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenBucketLimiter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenBucketLimiter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenBucketLimiter.Merge(m, src)
}
func (m *TokenBucketLimiter) XXX_Size() int {
	return m.Size()
}
func (m *TokenBucketLimiter) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenBucketLimiter.DiscardUnknown(m)
}

var xxx_messageInfo_TokenBucketLimiter proto.InternalMessageInfo

func (m *TokenBucketLimiter) GetRate() float64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *TokenBucketLimiter) GetBurst() uint32 {
	if m != nil {
		return m.Burst
	}
	return 0
}

func (m *TokenBucketLimiter) GetTokenCount() float64 {
	if m != nil {
		return m.TokenCount
	}
	return 0
}

func (m *TokenBucketLimiter) GetFillPeriod() int64 {
	if m != nil {
		return m.FillPeriod
	}
	return 0
}

func (m *TokenBucketLimiter) GetLastFilled() *types.Timestamp {
	if m != nil {
		return m.LastFilled
	}
	return nil
}

func (m *TokenBucketLimiter) GetNextFill() *types.Timestamp {
	if m != nil {
		return m.NextFill
	}
	return nil
}

type LeakyBucketLimiter struct {
	Rate        float64          `protobuf:"fixed64,1,opt,name=rate,proto3" json:"rate,omitempty"`
	Capability  uint32           `protobuf:"varint,2,opt,name=capability,proto3" json:"capability,omitempty"`
	Drops       float64          `protobuf:"fixed64,3,opt,name=drops,proto3" json:"drops,omitempty"`
	DrainPeriod int64            `protobuf:"varint,4,opt,name=drain_period,json=drainPeriod,proto3" json:"drain_period,omitempty"`
	LastDrained *types.Timestamp `protobuf:"bytes,5,opt,name=last_drained,json=lastDrained,proto3" json:"last_drained,omitempty"`
	NextDrain   *types.Timestamp `protobuf:"bytes,6,opt,name=next_drain,json=nextDrain,proto3" json:"next_drain,omitempty"`
}

func (m *LeakyBucketLimiter) Reset()         { *m = LeakyBucketLimiter{} }
func (m *LeakyBucketLimiter) String() string { return proto.CompactTextString(m) }
func (*LeakyBucketLimiter) ProtoMessage()    {}
func (*LeakyBucketLimiter) Descriptor() ([]byte, []int) {
	return fileDescriptor_e46b12dd09362083, []int{14}
}
func (m *LeakyBucketLimiter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeakyBucketLimiter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeakyBucketLimiter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeakyBucketLimiter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeakyBucketLimiter.Merge(m, src)
}
func (m *LeakyBucketLimiter) XXX_Size() int {
	return m.Size()
}
func (m *LeakyBucketLimiter) XXX_DiscardUnknown() {
	xxx_messageInfo_LeakyBucketLimiter.DiscardUnknown(m)
}

var xxx_messageInfo_LeakyBucketLimiter proto.InternalMessageInfo

func (m *LeakyBucketLimiter) GetRate() float64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *LeakyBucketLimiter) GetCapability() uint32 {
	if m != nil {
		return m.Capability
	}
	return 0
}

func (m *LeakyBucketLimiter) GetDrops() float64 {
	if m != nil {
		return m.Drops
	}
	return 0
}

func (m *LeakyBucketLimiter) GetDrainPeriod() int64 {
	if m != nil {
		return m.DrainPeriod
	}
	return 0
}

func (m *LeakyBucketLimiter) GetLastDrained() *types.Timestamp {
	if m != nil {
		return m.LastDrained
	}
	return nil
}

func (m *LeakyBucketLimiter) GetNextDrain() *types.Timestamp {
	if m != nil {
		return m.NextDrain
	}
	return nil
}

func init() {
	proto.RegisterEnum("api.ErrorCode", ErrorCode_name, ErrorCode_value)
	proto.RegisterEnum("api.LimiterType", LimiterType_name, LimiterType_value)
	proto.RegisterType((*CmdError)(nil), "api.CmdError")
	proto.RegisterType((*CmdHeader)(nil), "api.CmdHeader")
	proto.RegisterType((*NodeInfo)(nil), "api.NodeInfo")
	proto.RegisterType((*MeowCmdResp)(nil), "api.MeowCmdResp")
	proto.RegisterType((*AllowCmd)(nil), "api.AllowCmd")
	proto.RegisterType((*AllowCmdResp)(nil), "api.AllowCmdResp")
	proto.RegisterType((*RegResCmd)(nil), "api.RegResCmd")
	proto.RegisterType((*RegResCmdResp)(nil), "api.RegResCmdResp")
	proto.RegisterType((*GetResCmd)(nil), "api.GetResCmd")
	proto.RegisterType((*Resource)(nil), "api.Resource")
	proto.RegisterType((*ReqPerSec)(nil), "api.ReqPerSec")
	proto.RegisterType((*ReqPerSecEntry)(nil), "api.ReqPerSecEntry")
	proto.RegisterType((*TokenBucketParam)(nil), "api.TokenBucketParam")
	proto.RegisterType((*TokenBucketLimiter)(nil), "api.TokenBucketLimiter")
	proto.RegisterType((*LeakyBucketLimiter)(nil), "api.LeakyBucketLimiter")
}

func init() { proto.RegisterFile("proto/ratecat_api_v1.proto", fileDescriptor_e46b12dd09362083) }

var fileDescriptor_e46b12dd09362083 = []byte{
	// 1082 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0x51, 0x4f, 0x1b, 0x47,
	0x10, 0xf6, 0x9d, 0x8d, 0x39, 0xcf, 0xd9, 0xce, 0x75, 0x93, 0x36, 0x16, 0x55, 0x8d, 0x73, 0xa0,
	0xd6, 0xca, 0x83, 0x11, 0xe4, 0xa1, 0x4a, 0x9b, 0x46, 0x01, 0x02, 0x0d, 0x4a, 0x02, 0xe8, 0x42,
	0x54, 0xa9, 0x7d, 0xb0, 0x96, 0xbb, 0xc1, 0x59, 0xf9, 0xee, 0xf6, 0xd8, 0x5b, 0x9b, 0xf8, 0x5f,
	0xf4, 0xa9, 0x7f, 0xa3, 0x7f, 0xa3, 0x8f, 0x79, 0xec, 0x63, 0x05, 0xff, 0xa1, 0x52, 0xd5, 0x97,
	0x6a, 0xf7, 0xd6, 0xc6, 0x50, 0x25, 0xf0, 0xc4, 0xce, 0x37, 0xdf, 0x0c, 0x33, 0xdf, 0xcc, 0xed,
	0x1a, 0x96, 0x32, 0xc1, 0x25, 0x5f, 0x13, 0x54, 0x62, 0x48, 0x65, 0x9f, 0x66, 0xac, 0x3f, 0x5e,
	0xef, 0x69, 0x90, 0x94, 0x69, 0xc6, 0x96, 0x96, 0x07, 0x9c, 0x0f, 0x62, 0x5c, 0xd3, 0xd0, 0xf1,
	0xe8, 0x64, 0x4d, 0xb2, 0x04, 0x73, 0x49, 0x93, 0xac, 0x60, 0xf9, 0xcf, 0xc0, 0xd9, 0x4e, 0xa2,
	0x1d, 0x21, 0xb8, 0x20, 0x3e, 0x54, 0x42, 0x1e, 0x61, 0xcb, 0xea, 0x58, 0xdd, 0xe6, 0x46, 0xb3,
	0x47, 0x33, 0xd6, 0xd3, 0x9e, 0x6d, 0x1e, 0x61, 0xa0, 0x7d, 0xc4, 0x83, 0x72, 0x92, 0x0f, 0x5a,
	0x76, 0xc7, 0xea, 0xd6, 0x02, 0x75, 0xf4, 0xbf, 0x82, 0xda, 0x76, 0x12, 0xbd, 0x40, 0x1a, 0xa1,
	0x50, 0xee, 0x30, 0x89, 0x74, 0x86, 0x5a, 0xa0, 0x8e, 0xfe, 0x3f, 0x16, 0x38, 0xfb, 0x3c, 0xc2,
	0xbd, 0xf4, 0x84, 0x93, 0x26, 0xd8, 0xac, 0xf0, 0x36, 0x02, 0x9b, 0x45, 0x84, 0x40, 0x25, 0xa5,
	0x09, 0x9a, 0x74, 0xfa, 0x4c, 0x1e, 0x40, 0x5d, 0xf5, 0x81, 0x69, 0x94, 0x71, 0x96, 0xca, 0x56,
	0x59, 0xfb, 0x5c, 0x9a, 0xb1, 0x1d, 0x03, 0x91, 0x15, 0x68, 0x0c, 0x44, 0x16, 0x5e, 0x72, 0x2a,
	0x9a, 0x53, 0x57, 0xe0, 0x8c, 0x44, 0xa0, 0x22, 0x27, 0x19, 0xb6, 0x16, 0x8a, 0xdc, 0xea, 0x4c,
	0xbe, 0x80, 0x6a, 0xac, 0x0b, 0x6d, 0x55, 0x3b, 0x56, 0xd7, 0x09, 0x8c, 0xa5, 0x70, 0x1a, 0x4a,
	0x36, 0xc6, 0xd6, 0x62, 0x81, 0x17, 0x16, 0xf9, 0x01, 0xea, 0xc5, 0xa9, 0x9f, 0xb3, 0x34, 0xc4,
	0x96, 0xd3, 0xb1, 0xba, 0xee, 0xc6, 0x52, 0xaf, 0x50, 0xb5, 0x37, 0x55, 0xb5, 0x77, 0x34, 0x55,
	0x35, 0x70, 0x0b, 0xfe, 0x1b, 0x45, 0xf7, 0x5f, 0x82, 0xfb, 0x1a, 0xf9, 0xd9, 0x76, 0x12, 0x05,
	0x98, 0x67, 0xe4, 0x3e, 0x2c, 0xa6, 0x3c, 0xc2, 0xfe, 0x4c, 0x82, 0xaa, 0x32, 0xf7, 0x22, 0xb2,
	0x02, 0x0b, 0xea, 0x94, 0xb7, 0xec, 0x4e, 0xb9, 0xeb, 0x6e, 0x34, 0xb4, 0xf2, 0x53, 0xd1, 0x82,
	0xc2, 0xe7, 0x3f, 0x05, 0x67, 0x33, 0x8e, 0x75, 0x36, 0xb2, 0x04, 0x8e, 0xc0, 0x9c, 0x8f, 0x44,
	0x88, 0x46, 0xeb, 0x99, 0xad, 0x7a, 0xc1, 0x31, 0xa6, 0x32, 0xd7, 0xaa, 0x36, 0x02, 0x63, 0xf9,
	0x3f, 0x41, 0x7d, 0x1a, 0xaf, 0xab, 0x69, 0x03, 0x08, 0x8c, 0x98, 0xc0, 0x50, 0x62, 0x51, 0x90,
	0x13, 0xcc, 0x21, 0xf3, 0xd5, 0xda, 0x57, 0xaa, 0x6d, 0x82, 0xcd, 0x87, 0x7a, 0x2c, 0x4e, 0x60,
	0xf3, 0xa1, 0xff, 0xbb, 0x05, 0xb5, 0x00, 0x07, 0x01, 0xe6, 0x37, 0x95, 0xb6, 0x6a, 0x46, 0x62,
	0xeb, 0x05, 0xf3, 0x74, 0x9b, 0xaf, 0x58, 0xc2, 0x24, 0x8a, 0xa3, 0x49, 0x86, 0x66, 0x48, 0x4b,
	0xe0, 0xf0, 0x31, 0x0a, 0xc1, 0x22, 0x34, 0xff, 0x65, 0x66, 0x93, 0xef, 0xa0, 0x2e, 0xf9, 0x10,
	0xd3, 0xfe, 0xf1, 0x28, 0x1c, 0x62, 0x31, 0x78, 0x77, 0xe3, 0x73, 0x9d, 0xe9, 0x48, 0x39, 0xb6,
	0x34, 0x7e, 0x48, 0x05, 0x4d, 0x5e, 0x94, 0x02, 0x57, 0x5e, 0x62, 0x5b, 0x0e, 0x54, 0x79, 0x26,
	0x19, 0x4f, 0xfd, 0x2e, 0x34, 0x66, 0x05, 0x5f, 0x9f, 0xcc, 0x95, 0x5e, 0xfd, 0x6f, 0xa0, 0xf6,
	0x23, 0xca, 0x9b, 0x5b, 0xf3, 0x7f, 0xb3, 0xc1, 0x09, 0xa6, 0x7d, 0x4e, 0xd7, 0xda, 0x9a, 0x5b,
	0xeb, 0x8f, 0xca, 0xf9, 0x08, 0xea, 0x71, 0xa1, 0x41, 0x5f, 0x8b, 0x53, 0xfe, 0x88, 0x38, 0x6e,
	0x7c, 0x69, 0x90, 0x0e, 0x94, 0x45, 0x96, 0x9b, 0xf6, 0x8b, 0x2f, 0x35, 0xc0, 0xd3, 0x43, 0x14,
	0x6f, 0x30, 0x0c, 0x94, 0x4b, 0xad, 0x6e, 0x4c, 0x73, 0xd9, 0x1f, 0x65, 0x11, 0x55, 0x03, 0x5e,
	0xb8, 0x79, 0x75, 0x15, 0xff, 0x6d, 0x41, 0x27, 0x4f, 0xae, 0x09, 0x5d, 0xd5, 0xe1, 0xf7, 0xaf,
	0x0b, 0x6d, 0x0a, 0xbc, 0x2e, 0x75, 0x0d, 0x16, 0x4d, 0xb5, 0xfe, 0x2f, 0x6a, 0x39, 0x4c, 0x65,
	0xe4, 0x4b, 0xa8, 0x09, 0x3c, 0xed, 0x87, 0x7c, 0x94, 0x4a, 0xf3, 0x0d, 0x38, 0x02, 0x4f, 0xb7,
	0x95, 0x4d, 0xd6, 0xa1, 0xf6, 0x8e, 0xe5, 0x92, 0x0b, 0x36, 0xfb, 0x12, 0xee, 0x5e, 0xed, 0x6c,
	0x27, 0x95, 0x62, 0x12, 0x5c, 0xb2, 0xfc, 0x00, 0x9a, 0x57, 0x9d, 0xea, 0x02, 0x52, 0xc2, 0xa8,
	0xdc, 0x56, 0x21, 0x44, 0x0f, 0x2a, 0xea, 0xd2, 0xd3, 0xaa, 0x7f, 0x5a, 0x00, 0xcd, 0xf3, 0x9f,
	0x80, 0x77, 0x7d, 0x93, 0xd4, 0x40, 0xd5, 0x1d, 0x6b, 0xd2, 0xea, 0x33, 0xb9, 0x07, 0x0b, 0xc7,
	0x23, 0x91, 0x4b, 0x33, 0xce, 0xc2, 0xf0, 0xff, 0xb6, 0x80, 0xfc, 0x5f, 0x9f, 0xdb, 0x27, 0x20,
	0xcb, 0x50, 0x28, 0x69, 0x44, 0x2a, 0xeb, 0x00, 0xd0, 0x50, 0x21, 0xd3, 0x32, 0xb8, 0x27, 0x2c,
	0x8e, 0xfb, 0x19, 0x0a, 0xc6, 0x23, 0xbd, 0x02, 0xe5, 0x00, 0x14, 0x74, 0xa8, 0x11, 0xf2, 0x3d,
	0xe8, 0x49, 0xf6, 0x15, 0x74, 0xab, 0xc1, 0x83, 0xa2, 0xef, 0x6a, 0x36, 0xf9, 0x16, 0x6a, 0x29,
	0xbe, 0x2f, 0x82, 0xcd, 0xd0, 0x3f, 0x15, 0xea, 0x28, 0xb2, 0x0a, 0xf5, 0xff, 0xb5, 0x80, 0xbc,
	0x42, 0x3a, 0x9c, 0xdc, 0xdc, 0x78, 0x1b, 0x20, 0xa4, 0x19, 0x3d, 0x66, 0x31, 0x93, 0x13, 0xd3,
	0xfd, 0x1c, 0xa2, 0x84, 0x89, 0x04, 0xcf, 0x72, 0xd3, 0x7c, 0x61, 0xa8, 0x77, 0x21, 0x12, 0x94,
	0xa5, 0x57, 0x1b, 0x77, 0x35, 0x66, 0x3a, 0x9f, 0xee, 0xbc, 0xc6, 0x6e, 0xbf, 0xf3, 0xcf, 0x0b,
	0x3a, 0x79, 0x0c, 0xa0, 0x7b, 0xd7, 0xe1, 0xb7, 0x68, 0x5e, 0x2b, 0xa5, 0x83, 0x1f, 0x9e, 0x5b,
	0x50, 0x9b, 0x3d, 0x95, 0xa4, 0x0a, 0xf6, 0xc1, 0x4b, 0xaf, 0x44, 0x5c, 0x58, 0x7c, 0x9b, 0x0e,
	0x53, 0x7e, 0x96, 0x7a, 0x16, 0xa9, 0xab, 0x77, 0x50, 0xee, 0xf2, 0x51, 0x1a, 0x79, 0x36, 0xf9,
	0x0c, 0x1a, 0x9b, 0xb1, 0x40, 0x1a, 0x4d, 0x76, 0xde, 0xb3, 0x5c, 0xe6, 0x5e, 0x99, 0x34, 0x01,
	0x0e, 0x46, 0xf2, 0xe0, 0x24, 0xa0, 0xe9, 0x00, 0xbd, 0x0a, 0xb9, 0x07, 0xde, 0x5e, 0x1a, 0xf2,
	0x24, 0x8b, 0x51, 0xe2, 0x21, 0x55, 0xaa, 0x7a, 0x1d, 0xc5, 0xda, 0x4b, 0xc7, 0x34, 0x66, 0xd1,
	0xeb, 0x7c, 0xe0, 0x3d, 0x20, 0x77, 0xe1, 0xce, 0xd4, 0xa6, 0x03, 0x16, 0xee, 0x8f, 0x12, 0xcf,
	0x27, 0x04, 0x9a, 0x06, 0x34, 0x73, 0xf0, 0x56, 0x54, 0xe0, 0x4e, 0xaa, 0xde, 0xf0, 0x5d, 0xca,
	0x62, 0x6f, 0x55, 0xd9, 0xcf, 0x71, 0x66, 0x7f, 0x4d, 0xee, 0x80, 0x7b, 0x28, 0x78, 0x88, 0x79,
	0xae, 0x81, 0x67, 0x0a, 0xd8, 0xe5, 0xe2, 0x8c, 0x8a, 0x48, 0x03, 0x9b, 0x0f, 0x1f, 0x83, 0x3b,
	0x77, 0x21, 0x11, 0x07, 0x2a, 0xfb, 0xa3, 0x38, 0xf6, 0x4a, 0x8a, 0x39, 0xb7, 0xf3, 0x9e, 0xa5,
	0x80, 0xb9, 0x5d, 0xf0, 0xec, 0xad, 0xa7, 0x7f, 0x9c, 0xb7, 0xad, 0x0f, 0xe7, 0x6d, 0xeb, 0xaf,
	0xf3, 0xb6, 0xf5, 0xeb, 0x45, 0xbb, 0xf4, 0xe1, 0xa2, 0x5d, 0xfa, 0xf3, 0xa2, 0x5d, 0xfa, 0x79,
	0x75, 0xc0, 0xe4, 0xbb, 0xd1, 0x71, 0x2f, 0xe4, 0xc9, 0x1a, 0x4d, 0x73, 0x14, 0x51, 0x3e, 0x98,
	0xfe, 0xa0, 0x59, 0x1b, 0xaf, 0x9b, 0x5f, 0x2e, 0x55, 0xfd, 0xe7, 0xd1, 0x7f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x3e, 0x67, 0xdf, 0xce, 0xf1, 0x08, 0x00, 0x00,
}

func (m *CmdError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CmdError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintRatecatApiV1(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintRatecatApiV1(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CmdHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CmdHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cmd) > 0 {
		i -= len(m.Cmd)
		copy(dAtA[i:], m.Cmd)
		i = encodeVarintRatecatApiV1(dAtA, i, uint64(len(m.Cmd)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActiveSince != nil {
		{
			size, err := m.ActiveSince.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRatecatApiV1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Leader {
		i--
		if m.Leader {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintRatecatApiV1(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GrpcEndpoint) > 0 {
		i -= len(m.GrpcEndpoint)
		copy(dAtA[i:], m.GrpcEndpoint)
		i = encodeVarintRatecatApiV1(dAtA, i, uint64(len(m.GrpcEndpoint)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ApiEndpoint) > 0 {
		i -= len(m.ApiEndpoint)
		copy(dAtA[i:], m.ApiEndpoint)
		i = encodeVarintRatecatApiV1(dAtA, i, uint64(len(m.ApiEndpoint)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRatecatApiV1(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintRatecatApiV1(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MeowCmdResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeowCmdResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeowCmdResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRatecatApiV1(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.NodeId != 0 {
		i = encodeVarintRatecatApiV1(dAtA, i, uint64(m.NodeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AllowCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllowCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllowCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Events != 0 {
		i = encodeVarintRatecatApiV1(dAtA, i, uint64(m.Events))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Resource) > 0 {
		i -= len(m.Resource)
		copy(dAtA[i:], m.Resource)
		i = encodeVarintRatecatApiV1(dAtA, i, uint64(len(m.Resource)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AllowCmdResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllowCmdResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllowCmdResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.NodeId != 0 {
		i = encodeVarintRatecatApiV1(dAtA, i, uint64(m.NodeId))
		i--
		dAtA[i] = 0x10
	}
	if m.Redirected {
		i--
		if m.Redirected {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RegResCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegResCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegResCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Option != nil {
		{
			size := m.Option.Size()
			i -= size
			if _, err := m.Option.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Override {
		i--
		if m.Override {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintRatecatApiV1(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Resource) > 0 {
		i -= len(m.Resource)
		copy(dAtA[i:], m.Resource)
		i = encodeVarintRatecatApiV1(dAtA, i, uint64(len(m.Resource)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegResCmd_TokenBucket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegResCmd_TokenBucket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TokenBucket != nil {
		{
			size, err := m.TokenBucket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRatecatApiV1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *RegResCmdResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegResCmdResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegResCmdResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NodeId != 0 {
		i = encodeVarintRatecatApiV1(dAtA, i, uint64(m.NodeId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *GetResCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetResCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Resource) > 0 {
		i -= len(m.Resource)
		copy(dAtA[i:], m.Resource)
		i = encodeVarintRatecatApiV1(dAtA, i, uint64(len(m.Resource)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Resource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Resource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Resource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limiter != nil {
		{
			size := m.Limiter.Size()
			i -= size
			if _, err := m.Limiter.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LastUpdated != nil {
		{
			size, err := m.LastUpdated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRatecatApiV1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Rps != nil {
		{
			size, err := m.Rps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRatecatApiV1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.LimiterType != 0 {
		i = encodeVarintRatecatApiV1(dAtA, i, uint64(m.LimiterType))
		i--
		dAtA[i] = 0x18
	}
	if m.NodeId != 0 {
		i = encodeVarintRatecatApiV1(dAtA, i, uint64(m.NodeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRatecatApiV1(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Resource_TokenBucket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Resource_TokenBucket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TokenBucket != nil {
		{
			size, err := m.TokenBucket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRatecatApiV1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ReqPerSec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqPerSec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqPerSec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Histories) > 0 {
		for iNdEx := len(m.Histories) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Histories[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRatecatApiV1(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ReqCount != 0 {
		i = encodeVarintRatecatApiV1(dAtA, i, uint64(m.ReqCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqPerSecEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqPerSecEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqPerSecEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Time != nil {
		{
			size, err := m.Time.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRatecatApiV1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Rps != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Rps))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *TokenBucketParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenBucketParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenBucketParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Burst != 0 {
		i = encodeVarintRatecatApiV1(dAtA, i, uint64(m.Burst))
		i--
		dAtA[i] = 0x10
	}
	if m.Rate != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Rate))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *TokenBucketLimiter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenBucketLimiter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenBucketLimiter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextFill != nil {
		{
			size, err := m.NextFill.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRatecatApiV1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.LastFilled != nil {
		{
			size, err := m.LastFilled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRatecatApiV1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.FillPeriod != 0 {
		i = encodeVarintRatecatApiV1(dAtA, i, uint64(m.FillPeriod))
		i--
		dAtA[i] = 0x20
	}
	if m.TokenCount != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TokenCount))))
		i--
		dAtA[i] = 0x19
	}
	if m.Burst != 0 {
		i = encodeVarintRatecatApiV1(dAtA, i, uint64(m.Burst))
		i--
		dAtA[i] = 0x10
	}
	if m.Rate != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Rate))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *LeakyBucketLimiter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeakyBucketLimiter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeakyBucketLimiter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextDrain != nil {
		{
			size, err := m.NextDrain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRatecatApiV1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.LastDrained != nil {
		{
			size, err := m.LastDrained.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRatecatApiV1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.DrainPeriod != 0 {
		i = encodeVarintRatecatApiV1(dAtA, i, uint64(m.DrainPeriod))
		i--
		dAtA[i] = 0x20
	}
	if m.Drops != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Drops))))
		i--
		dAtA[i] = 0x19
	}
	if m.Capability != 0 {
		i = encodeVarintRatecatApiV1(dAtA, i, uint64(m.Capability))
		i--
		dAtA[i] = 0x10
	}
	if m.Rate != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Rate))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func encodeVarintRatecatApiV1(dAtA []byte, offset int, v uint64) int {
	offset -= sovRatecatApiV1(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CmdError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRatecatApiV1(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovRatecatApiV1(uint64(l))
	}
	return n
}

func (m *CmdHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cmd)
	if l > 0 {
		n += 1 + l + sovRatecatApiV1(uint64(l))
	}
	return n
}

func (m *NodeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRatecatApiV1(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRatecatApiV1(uint64(l))
	}
	l = len(m.ApiEndpoint)
	if l > 0 {
		n += 1 + l + sovRatecatApiV1(uint64(l))
	}
	l = len(m.GrpcEndpoint)
	if l > 0 {
		n += 1 + l + sovRatecatApiV1(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovRatecatApiV1(uint64(l))
	}
	if m.Leader {
		n += 2
	}
	if m.Active {
		n += 2
	}
	if m.ActiveSince != nil {
		l = m.ActiveSince.Size()
		n += 1 + l + sovRatecatApiV1(uint64(l))
	}
	return n
}

func (m *MeowCmdResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeId != 0 {
		n += 1 + sovRatecatApiV1(uint64(m.NodeId))
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovRatecatApiV1(uint64(l))
		}
	}
	return n
}

func (m *AllowCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Resource)
	if l > 0 {
		n += 1 + l + sovRatecatApiV1(uint64(l))
	}
	if m.Events != 0 {
		n += 1 + sovRatecatApiV1(uint64(m.Events))
	}
	return n
}

func (m *AllowCmdResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Redirected {
		n += 2
	}
	if m.NodeId != 0 {
		n += 1 + sovRatecatApiV1(uint64(m.NodeId))
	}
	if m.Ok {
		n += 2
	}
	return n
}

func (m *RegResCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Resource)
	if l > 0 {
		n += 1 + l + sovRatecatApiV1(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovRatecatApiV1(uint64(m.Type))
	}
	if m.Override {
		n += 2
	}
	if m.Option != nil {
		n += m.Option.Size()
	}
	return n
}

func (m *RegResCmd_TokenBucket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TokenBucket != nil {
		l = m.TokenBucket.Size()
		n += 1 + l + sovRatecatApiV1(uint64(l))
	}
	return n
}
func (m *RegResCmdResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeId != 0 {
		n += 1 + sovRatecatApiV1(uint64(m.NodeId))
	}
	return n
}

func (m *GetResCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Resource)
	if l > 0 {
		n += 1 + l + sovRatecatApiV1(uint64(l))
	}
	return n
}

func (m *Resource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRatecatApiV1(uint64(l))
	}
	if m.NodeId != 0 {
		n += 1 + sovRatecatApiV1(uint64(m.NodeId))
	}
	if m.LimiterType != 0 {
		n += 1 + sovRatecatApiV1(uint64(m.LimiterType))
	}
	if m.Rps != nil {
		l = m.Rps.Size()
		n += 1 + l + sovRatecatApiV1(uint64(l))
	}
	if m.LastUpdated != nil {
		l = m.LastUpdated.Size()
		n += 1 + l + sovRatecatApiV1(uint64(l))
	}
	if m.Limiter != nil {
		n += m.Limiter.Size()
	}
	return n
}

func (m *Resource_TokenBucket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TokenBucket != nil {
		l = m.TokenBucket.Size()
		n += 1 + l + sovRatecatApiV1(uint64(l))
	}
	return n
}
func (m *ReqPerSec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReqCount != 0 {
		n += 1 + sovRatecatApiV1(uint64(m.ReqCount))
	}
	if len(m.Histories) > 0 {
		for _, e := range m.Histories {
			l = e.Size()
			n += 1 + l + sovRatecatApiV1(uint64(l))
		}
	}
	return n
}

func (m *ReqPerSecEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rps != 0 {
		n += 9
	}
	if m.Time != nil {
		l = m.Time.Size()
		n += 1 + l + sovRatecatApiV1(uint64(l))
	}
	return n
}

func (m *TokenBucketParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rate != 0 {
		n += 9
	}
	if m.Burst != 0 {
		n += 1 + sovRatecatApiV1(uint64(m.Burst))
	}
	return n
}

func (m *TokenBucketLimiter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rate != 0 {
		n += 9
	}
	if m.Burst != 0 {
		n += 1 + sovRatecatApiV1(uint64(m.Burst))
	}
	if m.TokenCount != 0 {
		n += 9
	}
	if m.FillPeriod != 0 {
		n += 1 + sovRatecatApiV1(uint64(m.FillPeriod))
	}
	if m.LastFilled != nil {
		l = m.LastFilled.Size()
		n += 1 + l + sovRatecatApiV1(uint64(l))
	}
	if m.NextFill != nil {
		l = m.NextFill.Size()
		n += 1 + l + sovRatecatApiV1(uint64(l))
	}
	return n
}

func (m *LeakyBucketLimiter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rate != 0 {
		n += 9
	}
	if m.Capability != 0 {
		n += 1 + sovRatecatApiV1(uint64(m.Capability))
	}
	if m.Drops != 0 {
		n += 9
	}
	if m.DrainPeriod != 0 {
		n += 1 + sovRatecatApiV1(uint64(m.DrainPeriod))
	}
	if m.LastDrained != nil {
		l = m.LastDrained.Size()
		n += 1 + l + sovRatecatApiV1(uint64(l))
	}
	if m.NextDrain != nil {
		l = m.NextDrain.Size()
		n += 1 + l + sovRatecatApiV1(uint64(l))
	}
	return n
}

func sovRatecatApiV1(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRatecatApiV1(x uint64) (n int) {
	return sovRatecatApiV1(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CmdError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatecatApiV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRatecatApiV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatecatApiV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cmd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRatecatApiV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatecatApiV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpcEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrpcEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Leader = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveSince", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActiveSince == nil {
				m.ActiveSince = &types.Timestamp{}
			}
			if err := m.ActiveSince.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRatecatApiV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeowCmdResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatecatApiV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeowCmdResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeowCmdResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &NodeInfo{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRatecatApiV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllowCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatecatApiV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllowCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllowCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			m.Events = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Events |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRatecatApiV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllowCmdResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatecatApiV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllowCmdResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllowCmdResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redirected", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Redirected = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRatecatApiV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegResCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatecatApiV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegResCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegResCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= LimiterType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Override", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Override = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenBucket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TokenBucketParam{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Option = &RegResCmd_TokenBucket{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRatecatApiV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegResCmdResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatecatApiV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegResCmdResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegResCmdResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRatecatApiV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatecatApiV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRatecatApiV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Resource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatecatApiV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimiterType", wireType)
			}
			m.LimiterType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LimiterType |= LimiterType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rps == nil {
				m.Rps = &ReqPerSec{}
			}
			if err := m.Rps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUpdated == nil {
				m.LastUpdated = &types.Timestamp{}
			}
			if err := m.LastUpdated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenBucket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TokenBucketLimiter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Limiter = &Resource_TokenBucket{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRatecatApiV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqPerSec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatecatApiV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqPerSec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqPerSec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqCount", wireType)
			}
			m.ReqCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Histories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Histories = append(m.Histories, &ReqPerSecEntry{})
			if err := m.Histories[len(m.Histories)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRatecatApiV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqPerSecEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatecatApiV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqPerSecEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqPerSecEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rps", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Rps = float64(math.Float64frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = &types.Timestamp{}
			}
			if err := m.Time.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRatecatApiV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenBucketParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatecatApiV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenBucketParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenBucketParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Rate = float64(math.Float64frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Burst", wireType)
			}
			m.Burst = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Burst |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRatecatApiV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenBucketLimiter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatecatApiV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenBucketLimiter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenBucketLimiter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Rate = float64(math.Float64frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Burst", wireType)
			}
			m.Burst = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Burst |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenCount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TokenCount = float64(math.Float64frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FillPeriod", wireType)
			}
			m.FillPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FillPeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFilled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastFilled == nil {
				m.LastFilled = &types.Timestamp{}
			}
			if err := m.LastFilled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextFill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextFill == nil {
				m.NextFill = &types.Timestamp{}
			}
			if err := m.NextFill.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRatecatApiV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeakyBucketLimiter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatecatApiV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeakyBucketLimiter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeakyBucketLimiter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Rate = float64(math.Float64frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capability", wireType)
			}
			m.Capability = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Capability |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Drops", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Drops = float64(math.Float64frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrainPeriod", wireType)
			}
			m.DrainPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DrainPeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDrained", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastDrained == nil {
				m.LastDrained = &types.Timestamp{}
			}
			if err := m.LastDrained.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextDrain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextDrain == nil {
				m.NextDrain = &types.Timestamp{}
			}
			if err := m.NextDrain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRatecatApiV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRatecatApiV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRatecatApiV1(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRatecatApiV1
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRatecatApiV1
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRatecatApiV1
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRatecatApiV1
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRatecatApiV1
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRatecatApiV1        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRatecatApiV1          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRatecatApiV1 = fmt.Errorf("proto: unexpected end of group")
)
