// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/anserdsg/ratecat/v1/internal/cluster"
	"github.com/anserdsg/ratecat/v1/internal/cluster/probe"
	"github.com/anserdsg/ratecat/v1/internal/cmd"
	"github.com/anserdsg/ratecat/v1/internal/config"
	"github.com/anserdsg/ratecat/v1/internal/metric"
	"github.com/anserdsg/ratecat/v1/internal/mgr"
	"github.com/anserdsg/ratecat/v1/internal/server/api"
)

// Injectors from inject.go:

func initServices(ctx context.Context) (*serviceSet, error) {
	configConfig := config.GetDefault()
	metrics := provideMetrics(ctx, configConfig)
	nodeProber := probe.NewNodeProber(ctx, configConfig, metrics)
	resourceManager := mgr.NewResourceManager(ctx, configConfig, nodeProber)
	cmdDispatcher := cmd.NewCmdDispatcher(ctx, configConfig, resourceManager, metrics)
	clusterServer := cluster.NewServer(ctx, configConfig, resourceManager, cmdDispatcher, metrics, nodeProber)
	server, err := api.NewServer(ctx, configConfig, resourceManager, cmdDispatcher, clusterServer, metrics)
	if err != nil {
		return nil, err
	}
	mainServiceSet := &serviceSet{
		API:     server,
		Cluster: clusterServer,
	}
	return mainServiceSet, nil
}

// inject.go:

func provideMetrics(ctx context.Context, cfg *config.Config) *metric.Metrics {
	var backend metric.MetricBackend = metric.NullMetric

	if !cfg.Metrics.Enabled {
		backend = metric.NullMetric
	} else if cfg.IsDevEnv() {
		backend = metric.NewLogMetricBackend()
	} else {
		backend = metric.NullMetric
	}
	return metric.NewMetrics(ctx, cfg, backend)
}

type serviceSet struct {
	API     *api.Server
	Cluster *cluster.ClusterServer
}
